Binary file nmap matches
nmap.cc:      send_ip_packet(USI->rawsd, ethptr, packet, packetlen);
scan_engine.cc:  init_ultra_timing_vals(&timing, TIMING_GROUP, USI->numIncompleteHosts(), &(USI->perf), &USI->now);
scan_engine.cc:  if (USI->ping_scan_arp)
scan_engine.cc:  numtargets = USI->numIncompleteHosts(); // They are all incomplete at the beginning
scan_engine.cc:  if (USI->tcp_scan) {
scan_engine.cc:    numprobes = USI->ports->tcp_count;
scan_engine.cc:  } else if (USI->udp_scan) {
scan_engine.cc:    numprobes = USI->ports->udp_count;
scan_engine.cc:  } else if (USI->prot_scan) {
scan_engine.cc:    numprobes = USI->ports->prot_count;
scan_engine.cc:  } else if (USI->ping_scan_arp) {
scan_engine.cc:  if (USI->scantype == CONNECT_SCAN)
scan_engine.cc:  if (USI->scantype == CONNECT_SCAN && CSI->numSDs >= CSI->maxSocketsAllowed)
scan_engine.cc:  recentsends = USI->gstats->probes_sent - USI->gstats->probes_sent_at_last_wait;
scan_engine.cc:      (USI->scantype == CONNECT_SCAN || !pcap_recv_timeval_valid())) {
scan_engine.cc:    if (TIMEVAL_MSEC_SUBTRACT(USI->now, last_wait) > to_ms)
scan_engine.cc:  if (USI->numIncompleteHosts() == 1)
scan_engine.cc:  lastping_sent = lastprobe_sent = lastrcvd = USI->now;
scan_engine.cc:  init_ultra_timing_vals(&timing, TIMING_HOST, 1, &(USI->perf), &USI->now);
scan_engine.cc:  sdn.last_boost = USI->now;
scan_engine.cc:  rld.rld_waittime = USI->now;
scan_engine.cc:  } else if (USI->gstats->to.srtt > 0) {
scan_engine.cc:    return USI->gstats->to.timeout;
scan_engine.cc:  if (USI->scantype == CONNECT_SCAN)
scan_engine.cc:  if (target->timedOut(&USI->now) || completed()) {
scan_engine.cc:    if (when) *when = USI->now;
scan_engine.cc:    packTime = TIMEVAL_MSEC_SUBTRACT(rld.rld_waittime, USI->now);
scan_engine.cc:      if (when) *when = USI->now;
scan_engine.cc:    packTime = TIMEVAL_MSEC_SUBTRACT(USI->now, lastprobe_sent);
scan_engine.cc:    if (when) *when = USI->now;
scan_engine.cc:  TIMEVAL_MSEC_ADD(earliest_to, USI->now, 10000);
scan_engine.cc:    if (TIMEVAL_MSEC_SUBTRACT(sendTime, USI->now) < 0)
scan_engine.cc:      sendTime = USI->now;
scan_engine.cc:  *when = (firstgood)? USI->now : earliest_to;
scan_engine.cc:  if (maxval > (unsigned int) USI->perf.tryno_cap) {
scan_engine.cc:    maxval = USI->perf.tryno_cap;
scan_engine.cc:  if (USI->tcp_scan) {
scan_engine.cc:    if (hss->next_portidx >= USI->ports->tcp_count)
scan_engine.cc:    pspec->pd.tcp.dport = USI->ports->tcp_ports[hss->next_portidx++];
scan_engine.cc:    if (USI->scantype == CONNECT_SCAN) 
scan_engine.cc:      switch(USI->scantype) {
scan_engine.cc:  } else if (USI->udp_scan) {
scan_engine.cc:    if (hss->next_portidx >= USI->ports->udp_count)
scan_engine.cc:    pspec->pd.udp.dport = USI->ports->udp_ports[hss->next_portidx++];
scan_engine.cc:  } else if (USI->prot_scan) {
scan_engine.cc:    if (hss->next_portidx >= USI->ports->prot_count)
scan_engine.cc:    pspec->proto = USI->ports->prots[hss->next_portidx++];
scan_engine.cc:  } else if (USI->ping_scan_arp) {
scan_engine.cc:  if (USI->tcp_scan) {
scan_engine.cc:    if (next_portidx >= USI->ports->tcp_count)
scan_engine.cc:    return USI->ports->tcp_count - next_portidx;
scan_engine.cc:  } else if (USI->udp_scan) {
scan_engine.cc:    if (next_portidx >= USI->ports->udp_count)
scan_engine.cc:    return USI->ports->udp_count - next_portidx;
scan_engine.cc:  } else if (USI->prot_scan) {
scan_engine.cc:    if (next_portidx >= USI->ports->prot_count)
scan_engine.cc:    return USI->ports->prot_count - next_portidx;
scan_engine.cc:  } else if (USI->ping_scan_arp) {
scan_engine.cc:    assert(USI->gstats->num_probes_active > 0);
scan_engine.cc:    USI->gstats->num_probes_active--;
scan_engine.cc:    USI->gstats->CSI->clearSD(probe->CP()->sd);
scan_engine.cc:  int ping_magnifier = (probe->isPing())? USI->perf.ping_magnifier : 1;
scan_engine.cc:    adjust_timeouts2(&(probe->sent), rcvdtime, &(USI->gstats->to));
scan_engine.cc:  USI->gstats->timing.num_updates++;
scan_engine.cc:      hss->timing.cwnd = USI->perf.low_cwnd;
scan_engine.cc:      hss->timing.ccthresh = (int) MAX(hss->num_probes_active / USI->perf.host_drop_ccthresh_divisor, 2);
scan_engine.cc:      hss->timing.last_drop = USI->now;
scan_engine.cc:    if (TIMEVAL_SUBTRACT(probe->sent, USI->gstats->timing.last_drop) > 0) {
scan_engine.cc:      USI->gstats->timing.cwnd = MAX(USI->perf.low_cwnd, USI->gstats->timing.cwnd / USI->perf.group_drop_cwnd_divisor);
scan_engine.cc:      USI->gstats->timing.ccthresh = (int) MAX(USI->gstats->num_probes_active / USI->perf.group_drop_ccthresh_divisor, 2);
scan_engine.cc:      USI->gstats->timing.last_drop = USI->now;
scan_engine.cc:      hss->timing.cwnd += ping_magnifier * USI->perf.quick_incr;
scan_engine.cc:      hss->timing.cwnd += ping_magnifier * USI->perf.cc_incr / hss->timing.cwnd;
scan_engine.cc:    if (hss->timing.cwnd > USI->perf.max_cwnd)
scan_engine.cc:      hss->timing.cwnd = USI->perf.max_cwnd;
scan_engine.cc:    if (USI->gstats->timing.cwnd <= USI->gstats->timing.ccthresh) {
scan_engine.cc:      USI->gstats->timing.cwnd += ping_magnifier * USI->perf.quick_incr;
scan_engine.cc:      USI->gstats->timing.cwnd += ping_magnifier * USI->perf.cc_incr / USI->gstats->timing.cwnd;
scan_engine.cc:    if (USI->gstats->timing.cwnd > USI->perf.max_cwnd)
scan_engine.cc:      USI->gstats->timing.cwnd = USI->perf.max_cwnd;
scan_engine.cc:  assert(USI->gstats->num_probes_active > 0);
scan_engine.cc:  USI->gstats->num_probes_active--;
scan_engine.cc:    USI->gstats->CSI->clearSD(probe->CP()->sd);
scan_engine.cc:  seq = seq ^ USI->seqmask;
scan_engine.cc:  if (USI->gstats->timing.num_updates > 1) {
scan_engine.cc:    *tmng = USI->gstats->timing;
scan_engine.cc:  tmng->cwnd = USI->perf.host_initial_cwnd;
scan_engine.cc:  tmng->ccthresh = USI->perf.initial_ccthresh;
scan_engine.cc:  bool noresp_open_scan = USI->noresp_open_scan;
scan_engine.cc:  if (USI->prot_scan) {
scan_engine.cc:  unsigned int maxAllowed = (USI->tcp_scan)? o.maxTCPScanDelay() : o.maxUDPScanDelay();
scan_engine.cc:    sdn.delayms = (USI->udp_scan)? 50 : 5; // In many cases, a pcap wait takes a minimum of 80ms, so this matters little :(
scan_engine.cc:  sdn.last_boost = USI->now;
scan_engine.cc:  newstate = scantype_no_response_means(USI->scantype);
scan_engine.cc:  newstate = scantype_no_response_means(USI->scantype);
scan_engine.cc:  seq = seq ^ USI->seqmask;
scan_engine.cc:  if (tryval <= USI->perf.tryno_cap) {
scan_engine.cc:    if (pingseq) *pingseq = tryval - USI->perf.tryno_cap;
scan_engine.cc:  if (tryval > USI->perf.tryno_cap + 256)
scan_engine.cc:     ((changed && newstate != PORT_FILTERED) || USI->noresp_open_scan || probe->tryno == 0 || o.timing_level < 4) &&
scan_engine.cc:    sport = o.magic_port_set? o.magic_port : o.magic_port + USI->perf.tryno_cap + pingseq;
scan_engine.cc:  hss->lastprobe_sent = probe->sent = USI->now;
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:			    connect_errno, &USI->now);
scan_engine.cc:  USI->gstats->num_probes_active++;
scan_engine.cc:      ultrascan_ping_update(USI, hss, probeI, &USI->now);
scan_engine.cc:      ultrascan_port_probe_update(USI, hss, probeI, PORT_OPEN, &USI->now);
scan_engine.cc:      USI->gstats->CSI->watchSD(CP->sd);
scan_engine.cc:	ultrascan_ping_update(USI, hss, probeI, &USI->now);
scan_engine.cc:	ultrascan_port_probe_update(USI, hss, probeI, PORT_CLOSED, &USI->now);
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  hss->lastprobe_sent = probe->sent = USI->now;
scan_engine.cc:  if ((rc = eth_send(USI->ethsd, frame, sizeof(frame))) != sizeof(frame)) {
scan_engine.cc:  PacketTrace::traceArp(PacketTrace::SENT, (u8 *) frame, sizeof(frame), &USI->now);
scan_engine.cc:  USI->gstats->num_probes_active++;
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  if (USI->ethsd) {
scan_engine.cc:    eth.ethsd = USI->ethsd;
scan_engine.cc:    sport = o.magic_port_set? o.magic_port : o.magic_port + USI->perf.tryno_cap + pingseq;
scan_engine.cc:  if (USI->tcp_scan) {
scan_engine.cc:    assert(USI->scantype != CONNECT_SCAN);
scan_engine.cc:	hss->lastprobe_sent = probe->sent = USI->now;
scan_engine.cc:      send_ip_packet(USI->rawsd, ethptr, packet, packetlen);
scan_engine.cc:  } else if (USI->udp_scan) {
scan_engine.cc:	hss->lastprobe_sent = probe->sent = USI->now;
scan_engine.cc:      send_ip_packet(USI->rawsd, ethptr, packet, packetlen);
scan_engine.cc:  } else if (USI->prot_scan) {
scan_engine.cc:	hss->lastprobe_sent = probe->sent = USI->now;
scan_engine.cc:      send_ip_packet(USI->rawsd, ethptr, packet, packetlen);
scan_engine.cc:  USI->gstats->num_probes_active++;
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  USI->gstats->probes_sent++;
scan_engine.cc:  if (USI->ping_scan_arp)
scan_engine.cc:  else if (USI->scantype == CONNECT_SCAN)
scan_engine.cc:  USI->gstats->probes_sent++;
scan_engine.cc:  if (USI->scantype == CONNECT_SCAN)
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  while (unableToSend < USI->numIncompleteHosts() && USI->gstats->sendOK()) {
scan_engine.cc:    hss = USI->nextIncompleteHost();
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  while (unableToSend < USI->numIncompleteHosts() && USI->gstats->sendOK()) {
scan_engine.cc:    hss = USI->nextIncompleteHost();
scan_engine.cc:  if (USI->scantype == CONNECT_SCAN) {
scan_engine.cc:  } else if (USI->scantype == RPC_SCAN) {
scan_engine.cc:  USI->gstats->probes_sent++;
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  for(hostI = USI->incompleteHosts.begin(); 
scan_engine.cc:      hostI != USI->incompleteHosts.end(); hostI++) {
scan_engine.cc:	TIMEVAL_SUBTRACT(USI->now, hss->lastrcvd) > USI->perf.pingtime && 
scan_engine.cc:	TIMEVAL_SUBTRACT(USI->now, hss->lastping_sent) > USI->perf.pingtime &&
scan_engine.cc:	USI->gstats->sendOK() && hss->sendOK(NULL)) {
scan_engine.cc:      hss->lastping_sent = USI->now;
scan_engine.cc:  if (USI->gstats->numprobes < 30 && 
scan_engine.cc:      USI->gstats->lastping_sent_numprobes + 20 && 
scan_engine.cc:      TIMEVAL_SUBTRACT(USI->now, USI-gstats->lastrcvd) > USI->perf.pingtime && 
scan_engine.cc:      TIMEVAL_SUBTRACT(USI->now, USI-gstats->lastping_sent) > USI->perf.pingtime && 
scan_engine.cc:      USI->gstats->sendOK()) {
scan_engine.cc:    if (USI->prot_scan)
scan_engine.cc:  USI->gstats->probes_sent++;
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  while(USI->gstats->sendOK()) {
scan_engine.cc:    for(hostI = USI->incompleteHosts.begin(); 
scan_engine.cc:	hostI != USI->incompleteHosts.end(); hostI++) {
scan_engine.cc:		USI->gstats->numprobes > 1) {
scan_engine.cc:	      TIMEVAL_MSEC_ADD(host->rld.rld_waittime, USI->now, 1000);
scan_engine.cc:	   USI->numIncompleteHosts(), USI->numInitialHosts(), 
scan_engine.cc:	   USI->gstats->num_probes_active, USI->gstats->timing.cwnd,
scan_engine.cc:	   USI->gstats->timing.ccthresh, USI->gstats->to.timeout, 
scan_engine.cc:	   USI->gstats->to.srtt, USI->gstats->to.rttvar);
scan_engine.cc:    for(hostI = USI->incompleteHosts.begin(); 
scan_engine.cc:	hostI != USI->incompleteHosts.end(); hostI++) {
scan_engine.cc:  if (USI->SPM->mayBePrinted(&USI->now)) {
scan_engine.cc:    double avgdone = USI->gstats->numtargets - USI->numIncompleteHosts();
scan_engine.cc:    for(hostI = USI->incompleteHosts.begin(); 
scan_engine.cc:        hostI != USI->incompleteHosts.end(); hostI++) {
scan_engine.cc:      thishostpercdone /= maxtries * USI->gstats->numprobes;
scan_engine.cc:    avgdone /= USI->gstats->numtargets;
scan_engine.cc:    USI->SPM->printStatsIfNeccessary(avgdone, &USI->now);
scan_engine.cc:  ConnectScanInfo *CSI = USI->gstats->CSI;
scan_engine.cc:    timeleft = TIMEVAL_MSEC_SUBTRACT(*stime, USI->now);
scan_engine.cc:    fds_rtmp = USI->gstats->CSI->fds_read;
scan_engine.cc:    fds_wtmp = USI->gstats->CSI->fds_write;
scan_engine.cc:    fds_xtmp = USI->gstats->CSI->fds_except;
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  for(hostI = USI->incompleteHosts.begin(); 
scan_engine.cc:      hostI != USI->incompleteHosts.end() && numGoodSD < selectres; hostI++) {
scan_engine.cc:	    ultrascan_ping_update(USI, host, probeI, &USI->now);
scan_engine.cc:	    ultrascan_port_probe_update(USI, host, probeI, newstate, &USI->now);
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:    to_usec = TIMEVAL_SUBTRACT(*stime, USI->now);
scan_engine.cc:    rc = read_arp_reply_pcap(USI->pd, rcvdmac, &rcvdIP, to_usec, &rcvdtime);
scan_engine.cc:    gettimeofday(&USI->now, NULL);
scan_engine.cc:      if (TIMEVAL_SUBTRACT(*stime, USI->now) < 0) {
scan_engine.cc:      if (TIMEVAL_SUBTRACT(USI->now, *stime) > 200000) {
scan_engine.cc:      hss = USI->findIncompleteHost((struct sockaddr_storage *) &sin);
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:    to_usec = TIMEVAL_SUBTRACT(*stime, USI->now);
scan_engine.cc:    ip = (struct ip *) readip_pcap(USI->pd, &bytes, to_usec, &rcvdtime, &linkhdr);
scan_engine.cc:    gettimeofday(&USI->now, NULL);
scan_engine.cc:    if (!ip && TIMEVAL_SUBTRACT(*stime, USI->now) < 0) {
scan_engine.cc:    if (TIMEVAL_SUBTRACT(USI->now, *stime) > 200000) {
scan_engine.cc:    if (USI->prot_scan) {
scan_engine.cc:      hss = USI->findIncompleteHost((struct sockaddr_storage *) &sin);
scan_engine.cc:    if (ip->ip_p == IPPROTO_TCP && !USI->prot_scan) {
scan_engine.cc:      hss = USI->findIncompleteHost((struct sockaddr_storage *) &sin);
scan_engine.cc:	  if (USI->scantype == SYN_SCAN && tcp->th_flags == (TH_SYN|TH_ACK)) {
scan_engine.cc:	    if (USI->scantype == WINDOW_SCAN ) {
scan_engine.cc:	    } else if (USI->scantype == ACK_SCAN) {
scan_engine.cc:      if (USI->tcp_scan || USI->udp_scan)
scan_engine.cc:      if (USI->tcp_scan && ip2->ip_p != IPPROTO_TCP)
scan_engine.cc:      if (USI->udp_scan && ip2->ip_p != IPPROTO_UDP)
scan_engine.cc:      hss = USI->findIncompleteHost((struct sockaddr_storage *) &sin);
scan_engine.cc:	if (ip2->ip_p == IPPROTO_TCP && !USI->prot_scan) {
scan_engine.cc:	} else if (ip2->ip_p == IPPROTO_UDP && !USI->prot_scan) {
scan_engine.cc:	} else if (!USI->prot_scan) {
scan_engine.cc:	    if (USI->scantype == IPPROT_SCAN) {
scan_engine.cc:	    if (USI->scantype == UDP_SCAN && 
scan_engine.cc:    } else if (ip->ip_p == IPPROTO_UDP && !USI->prot_scan) {
scan_engine.cc:      hss = USI->findIncompleteHost((struct sockaddr_storage *) &sin);
scan_engine.cc:    hss = USI->findIncompleteHost((struct sockaddr_storage *) &protoscanicmphackaddy);
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  USI->gstats->last_wait = USI->now;
scan_engine.cc:  USI->gstats->probes_sent_at_last_wait = USI->gstats->probes_sent;
scan_engine.cc:    USI->sendOK(&stime);
scan_engine.cc:    if (USI->ping_scan_arp) {
scan_engine.cc:    } else if (USI->pd) {
scan_engine.cc:    } else if (USI->scantype == CONNECT_SCAN) {
scan_engine.cc:  } while (gotone && USI->gstats->num_probes_active > 0);
scan_engine.cc:  gettimeofday(&USI->now, NULL);
scan_engine.cc:  USI->gstats->last_wait = USI->now;
scan_engine.cc:  if (USI->scantype == CONNECT_SCAN)
scan_engine.cc:  USI->pd = my_pcap_open_live(Targets[0]->deviceName(), 100,  (o.spoofsource)? 1 : 0, pcap_selectable_fd_valid()? 200 : 2);
scan_engine.cc:  if (USI->tcp_scan || USI->udp_scan) {
scan_engine.cc:		     (USI->tcp_scan)? "tcp" : "udp", dst_hosts);
scan_engine.cc:			(USI->tcp_scan)? "tcp" : "udp");
scan_engine.cc:  } else if (USI->prot_scan) {
scan_engine.cc:  } else if (USI->ping_scan_arp) {
scan_engine.cc:  set_pcap_filter(Targets[0]->deviceName(), USI->pd, pcap_filter);
scan_engine.cc:  /* pcap_setnonblock(USI->pd, 1, NULL); */
scan_engine.cc:    gettimeofday(&USI->now, NULL);
scan_engine.cc:    tv_start = USI->now;
scan_engine.cc:  USI->removeCompletedHosts();
scan_engine.cc:  if (USI->numIncompleteHosts() == 0)
scan_engine.cc:  for(hostI = USI->incompleteHosts.begin(); 
scan_engine.cc:      hostI != USI->incompleteHosts.end(); hostI++) {
scan_engine.cc:      if (!probe->timedout && TIMEVAL_SUBTRACT(USI->now, probe->sent) > 
scan_engine.cc:	  newstate = scantype_no_response_means(USI->scantype);
scan_engine.cc:	  if (USI->scantype == PING_SCAN_ARP)
scan_engine.cc:		   TIMEVAL_SUBTRACT(USI->now, probe->sent) > expire_us) {
scan_engine.cc:	  TIMEVAL_SUBTRACT(USI->now, probe->sent) > expire_us) {
scan_engine.cc:  USI->removeCompletedHosts();
scan_engine.cc:    gettimeofday(&USI->now, NULL);
scan_engine.cc:    tv_diff = TIMEVAL_MSEC_SUBTRACT(USI->now, tv_start);
scan_engine.cc:    log_write(LOG_STDOUT, "Scanning %s [%d port%s%s]\n", targetstr, USI->gstats->numprobes, (USI->gstats->numprobes != 1)? "s" : "", plural? "/host" : "");
scan_engine.cc:  while(USI->numIncompleteHosts() != 0) {
scan_engine.cc:    gettimeofday(&USI->now, NULL);
scan_engine.cc:    // printf("TRACE: Finished doAnyNewProbes() at %.4fs\n", o.TimeSinceStartMS(&USI->now) / 1000.0);
scan_engine.cc:    gettimeofday(&USI->now, NULL);
scan_engine.cc:    // printf("TRACE: Finished waitForResponses() at %.4fs\n", o.TimeSinceStartMS(&USI->now) / 1000.0);
scan_engine.cc:       double avgdone = USI->gstats->numtargets - USI->numIncompleteHosts();
scan_engine.cc:       for(hostI = USI->incompleteHosts.begin(); 
scan_engine.cc:           hostI != USI->incompleteHosts.end(); hostI++) {
scan_engine.cc:          thishostpercdone /= maxtries * USI->gstats->numprobes;
scan_engine.cc:       avgdone /= USI->gstats->numtargets;
scan_engine.cc:       USI->SPM->printStats(avgdone, NULL); // This prints something like SYN Stealth Scan Timing: About 1.14% done; ETC: 15:01 (0:43:23 remaining);
scan_engine.cc:    if (USI->gstats->num_hosts_timedout == 0)
scan_engine.cc:		(unsigned long) USI->gstats->numprobes * Targets.size(), 
scan_engine.cc:		   USI->gstats->num_hosts_timedout, 
scan_engine.cc:		   (USI->gstats->num_hosts_timedout == 1)? "host" : "hosts");
scan_engine.cc:    USI->SPM->endTask(NULL, additional_info);
Binary file scan_engine.o matches
